{"version":3,"file":"index.test.js","sourceRoot":"","sources":["../../tests/index.test.ts"],"names":[],"mappings":";AAAA,iCAAiC;AACjC,kBAAkB;AAClB,gCAAgC;AAChC,4BAA4B;AAC5B,mCAAmC;AACnC,sCAAsC;AAEtC,gDAAgD;AAEhD,6BAA6B;AAE7B,kCAAkC;AAClC,2EAA2E;AAC3E,sBAAsB;AACtB,YAAY;AACZ,oEAAoE;AACpE,sBAAsB;AACtB,qBAAqB;AACrB,QAAQ;AAER,2CAA2C;AAC3C,QAAQ;AAER,qEAAqE;AACrE,kFAAkF;AAClF,yCAAyC;AACzC,8CAA8C;AAC9C,eAAe;AACf,SAAS;AAET,uEAAuE;AACvE,gDAAgD;AAChD,yDAAyD;AACzD,QAAQ;AACR,MAAM","sourcesContent":["// import { expect } from \"chai\";\n// import \"mocha\";\n// import * as util from \"util\";\n// import * as fs from \"fs\";\n// import { MichML } from \"../src\";\n// import * as cheerio from \"cheerio\";\n\n// const readFile = util.promisify(fs.readFile);\n\n// const mich = new MichML();\n\n// describe(\"Test michml\", () => {\n//   it(\"should throw error if template file does not exist\", async () => {\n//     let error: any;\n//     try {\n//       await mich.toHTMLString(__dirname + \"/templates/nop.mjml\");\n//     } catch (err) {\n//       error = err;\n//     }\n\n//     expect(error.code).to.eql(\"ENOENT\");\n//   });\n\n//   it(\"should return valid HTML without var in MJML\", async () => {\n//     const html = await mich.toHTMLString(__dirname + \"/templates/no_var.mjml\");\n//     const htmlLoaded = await readFile(\n//       __dirname + \"/templates/no_var.html\",\n//       \"utf8\"\n//     );\n\n//     // fs.writeFileSync(__dirname + \"/templates/no_var.html\", html);\n//     const cheerioLoaded = cheerio.load(html);\n//     const cheerioGenerated = cheerio.load(htmlLoaded);\n//   });\n// });\n"]}